# YouTube Shorts Editor - Phase 1 Multi-Service Configuration
version: '3.8'

# Shared environment variables
x-app-env: &app_env
  DATABASE_URL: "postgresql://postgres:shorts_password@postgres:5432/shorts_editor"
  REDIS_URL: "redis://redis:6379/0"
  STORAGE_PATH: "/data"
  OPENAI_API_KEY: ${OPENAI_API_KEY}
  LOG_LEVEL: "INFO"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: shorts_editor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: shorts_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shorts_network

  # Redis Cache/Queue
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shorts_network

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
      target: base-image
      args:
        - BASE_IMAGE=base-image
    ports:
      - "8000:8000"
    environment:
      <<: *app_env
    volumes:
      - video_data:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - shorts_network
    restart: unless-stopped

  # Celery Worker (GPU-enabled)
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      target: base-image
      args:
        - BASE_IMAGE=base-image
    environment:
      <<: *app_env
      CUDA_VISIBLE_DEVICES: "0"  # GPU constraint
    volumes:
      - video_data:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - shorts_network
    restart: unless-stopped

  # Optional: Celery Beat for periodic tasks
  beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      target: base-image
    environment:
      <<: *app_env
    command: python3 -m celery -A core_svc.tasks.celery_app beat --loglevel=info
    volumes:
      - beat_data:/app/celerybeat-schedule
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - shorts_network
    restart: unless-stopped

  # Next.js Frontend Studio
  studio:
    build:
      context: ./studio-ui
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: "http://api:8000"
      NEXT_PUBLIC_WS_URL: "ws://api:8000"
      NODE_ENV: "production"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - shorts_network
    restart: unless-stopped

  # Nginx Reverse Proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - video_data:/var/www/videos:ro
    depends_on:
      - api
      - studio
    networks:
      - shorts_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  video_data:
    driver: local
  beat_data:
    driver: local

networks:
  shorts_network:
    driver: bridge